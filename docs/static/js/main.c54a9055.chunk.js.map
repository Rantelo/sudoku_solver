{"version":3,"sources":["solver.js","App.js","serviceWorker.js","index.js"],"names":["areEqual","prev","curr","JSON","stringify","zerosToArrays","arr","map","row","rIdx","col","cIdx","suggestions","i","inRow","inCol","inBox","push","getSuggestions","arraysToZeros","_col","Array","length","num","includes","e","iStart","Math","floor","jStart","box","j","CurrentSelector","current","setter","className","key","onClick","App","React","useState","setCurrent","initial","setInitial","solution","original","findSolution","rowIndex","colIndex","x","y","tempMatrix","setCell","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c54a9055.chunk.js","sourcesContent":["\n\nexport function findSolution(original) {\n  let solution = [...original];\n\n  let prev;\n  // cycle until next solution is is same as current\n\n  while (!areEqual(prev, solution)) {\n  // 1. store prev solution\n    prev = [...solution];\n  // 2. replace 0s with arrays of possibles\n    solution = zerosToArrays(solution);\n  // 3. replace arrays of length==1 with content\n  // 4. replaces possibles with 0\n    solution = arraysToZeros(solution);\n  }\n  return solution;\n}\n\nfunction areEqual(prev, curr) {\n  return ( JSON.stringify(prev) === JSON.stringify(curr) );\n}\n\nfunction zerosToArrays(arr) {\n  return arr.map((row, rIdx) => row.map((col, cIdx) =>\n    (col === 0) ? getSuggestions(arr, rIdx, cIdx) : col\n  ));\n}\nfunction arraysToZeros(arr) {\n  return arr.map((row, rIdx) => row.map((_col, cIdx) => {\n    if (arr[rIdx][cIdx] instanceof Array) {\n      return (arr[rIdx][cIdx].length === 1) ? arr[rIdx][cIdx][0] : 0;\n    }\n    return arr[rIdx][cIdx];\n  }));\n}\n\n\nfunction getSuggestions(arr, row, col) {\n  const suggestions = [];\n  for (let i = 1; i < 10; i++) {\n    if (\n      !inRow(i, arr, row) &&\n      !inCol(i, arr, col) &&\n      !inBox(i, arr, row, col)\n    ) suggestions.push(i);\n  }\n  return suggestions;\n}\n\nfunction inRow(num, arr, row) {\n  return arr[row].includes(num);\n}\n\nfunction inCol(num, arr, col) {\n  return arr.map(e => e[col]).includes(num);\n}\n\nfunction inBox(num, arr, row, col) {\n  const iStart = Math.floor(row/3) * 3;\n  const jStart = Math.floor(col/3) * 3;\n  const box = [];\n  for (let i = iStart; i <= iStart + 2; i++) {\n    for (let j = jStart; j <= jStart + 2; j++) {\n      if (arr[i][j] !== 0 && typeof arr[i][j] === 'number')\n        box.push(arr[i][j]);\n    }\n  }\n  return box.includes(num);\n}","import React from 'react';\nimport './App.css';\nimport { findSolution } from './solver';\n\n/* *\n - Button to trigger solver\n - Solver\n\n ------------- DONE\n x fix warnings\n x click again will remove\n*/\nfunction App() {\n  const [ current, setCurrent ] = React.useState(1);\n  const [ initial, setInitial ] = React.useState([\n    [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ],\n    [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ],\n    [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ],\n    [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ],\n    [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ],\n    [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ],\n    [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ],\n    [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ],\n    [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ],\n  ]);\n  // const [ initial, setInitial ] = React.useState([\n  //   [ 0, 0, 0, 0, 3, 6, 4, 2, 8 ],\n  //   [ 0, 0, 0, 4, 2, 8, 5, 9, 7 ],\n  //   [ 0, 0, 0, 7, 9, 5, 6, 1, 3 ],\n  //   [ 7, 8, 2, 3, 6, 9, 1, 4, 5 ],\n  //   [ 6, 0, 9, 5, 4, 7, 8, 3, 2 ],\n  //   [ 5, 4, 3, 8, 1, 2, 7, 6, 9 ],\n  //   [ 2, 7, 0, 9, 5, 4, 3, 8, 6 ],\n  //   [ 3, 6, 5, 2, 8, 1, 9, 7, 4 ],\n  //   [ 8, 9, 4, 6, 7, 3, 2, 5, 1 ],\n  // ]);\n  const setCell = (x, y) => {\n    const tempMatrix = [...initial];\n    tempMatrix[x][y] = (tempMatrix[x][y] === current) ? 0 : current;\n    setInitial(tempMatrix);\n  }\n\n  const solve = () => {\n    const solution = findSolution([...initial]);\n    setInitial(solution);\n  }\n\n  return (\n    <div className=\"app\">\n      <CurrentSelector current={current} setter={setCurrent} />\n      <button onClick={solve}>SOLVE!</button>\n      <div className=\"board\">\n        {\n          initial.map((row, rowIndex) => (\n            <div\n              className=\"row\"\n              key={`row${rowIndex}`}\n            >\n              {row.map((col, colIndex) => (\n                <div\n                  key={`col${colIndex}-row${rowIndex}`}\n                  className=\"col\"\n                  onClick={() => setCell(rowIndex, colIndex)}\n                >\n                  {(col === 0) ? \"\" : col}\n                </div>\n              ))}\n            </div>\n          ))\n        }\n      </div>\n    </div>\n  );\n}\n\nconst CurrentSelector = ({ current, setter }) => {\n  return (\n    <div className=\"current-select\">\n      {\n        [1,2,3,4,5,6,7,8,9].map(e => (\n          <div\n            key={`${e}-currentselect`}\n            className={`${(e === current) ? \"current\" : \"\"}`}\n            onClick={() => setter(e)}\n            >\n          {e}\n          </div>\n        ))\n      }\n    </div>\n  )\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}